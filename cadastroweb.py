import streamlit as st
import datetime
import os
import json

# Nome do arquivo onde os dados dos ve√≠culos ser√£o armazenados em formato JSON
arquivos_salvos = 'veiculos_json'

# Fun√ß√£o para carregar os ve√≠culos salvos no arquivo JSON
def carregar_veiculos():
    if os.path.exists(arquivos_salvos):
        with open(arquivos_salvos, 'r', encoding='utf-8') as f:
            return json.load(f)  # Retorna o dicion√°rio de ve√≠culos
    return {}  # Se o arquivo n√£o existir, retorna um dicion√°rio vazio

# Fun√ß√£o para salvar os dados dos ve√≠culos no arquivo JSON
def salvar_veiculos(veiculos):
    with open(arquivos_salvos, 'w', encoding='utf-8') as f:
        json.dump(veiculos, f, ensure_ascii=False, indent=4)  # Salva formatado com identa√ß√£o

# Fun√ß√£o que cria o dicion√°rio com os dados do ve√≠culo
def criar_cadastro(data, cliente, telefone, placa, marca, modelo, ano, cor, km, resolver):
    return {
        'data': data,
        'cliente': cliente,
        'telefone': telefone,
        'placa': placa,
        'marca': marca,
        'modelo': modelo,
        'ano': ano,
        'cor': cor,
        'km': km,
        'resolver': resolver
    }

# Fun√ß√£o principal para cadastrar um novo ve√≠culo
def cadastro_veiculo():
    st.title('Cadastrar Ve√≠culo para Manuten√ß√£o')  # T√≠tulo da p√°gina
    st.write('Digite os dados do Ve√≠culo e do propriet√°rio.')  # Instru√ß√£o ao usu√°rio
    
    # Define limites para a data
    data_minima = datetime.date(1900,1,1)
    data_maxima = datetime.date(2100,1,1)

    # Campos de entrada
    data = st.date_input('Data do cadastro ?', format='DD/MM/YYYY', min_value=data_minima, max_value=data_maxima)
    cliente = st.text_input('Nome do cliente que veio com o ve√≠culo?')
    telefone = st.text_input('Telefone do cliente?')
    placa = st.text_input('Qual a placa do ve√≠culo ?')
    marca = st.text_input('Qual a marca do ve√≠culo ?')
    modelo = st.text_input('Qual o modelo do ve√≠culo ?')
    ano = st.number_input('Ano do ve√≠culo?', step=1, value=0, format='%d')
    cor = st.text_input('Qual a cor do ve√≠culo ?')
    km = st.number_input('Qual a quilometragem do ve√≠culo?', step=1, value=0, format='%d')
    resolver = st.text_area('Descreva o problema do ve√≠culo e o que deseja resolver:')

    # Bot√£o para cadastrar
    if st.button('Cadastrar'):
        veiculos = carregar_veiculos()  # Carrega ve√≠culos j√° cadastrados
        veiculo = criar_cadastro(str(data), cliente, telefone, placa.upper(), marca, modelo, ano, cor, km, resolver)
        veiculos[placa.upper()] = veiculo  # Usa a placa (em mai√∫sculo) como chave
        salvar_veiculos(veiculos)  # Salva os dados

        st.success('Ve√≠culo cadastrado com sucesso!')
        st.write(f'{data} - {cliente} - {telefone} - {placa} - {marca} - {modelo} - {ano} - {cor} - {km} - {resolver}')

# Fun√ß√£o para listar todos os ve√≠culos cadastrados
def lista_veiculos():
    st.title('Lista de Ve√≠culos Cadastrados')
    st.write('Aqui est√£o os Ve√≠culos cadastrados:')

    veiculos = carregar_veiculos()  # Carrega os dados

    # Se houver ve√≠culos cadastrados, exibe cada um
    if veiculos:
        for placa, veiculo in veiculos.items():
            with st.expander(f"Placa: {placa} | Cliente: {veiculo['cliente']}"):
                st.write(f"üìÖ Data: {veiculo['data']}")
                st.write(f"üìû Telefone: {veiculo['telefone']}")
                st.write(f"üöó Marca: {veiculo['marca']}")
                st.write(f"üìç Modelo: {veiculo['modelo']}")
                st.write(f"üî¢ Ano: {veiculo['ano']}")
                st.write(f"üé® Cor: {veiculo['cor']}")
                st.write(f"üìä KM: {veiculo['km']}")
                st.write(f"üõ†Ô∏è Problema: {veiculo['resolver']}")
    else:
        st.info('Nenhum ve√≠culo cadastrado at√© o momento.')

# Fun√ß√£o para consultar um ve√≠culo pela placa
def consultar_veiculo():
    st.title('Consultar Ve√≠culos Cadastrados')
    st.write('Digite a placa do Ve√≠culo para consulta.')
    placa_consulta = st.text_input('Placa do Ve√≠culo:').upper()

    veiculos = carregar_veiculos()
    if placa_consulta:
        if placa_consulta in veiculos:
            veiculo = veiculos[placa_consulta]
            # Exibe os dados encontrados
            st.write(f"Data: {veiculo['data']}, Cliente: {veiculo['cliente']}, Telefone: {veiculo['telefone']}, Placa: {veiculo['placa']}, Marca: {veiculo['marca']}, Modelo: {veiculo['modelo']}, Ano: {veiculo['ano']}, Cor: {veiculo['cor']}, KM: {veiculo['km']}, Resolver: {veiculo['resolver']}")
        else:
            st.warning('Ve√≠culo n√£o encontrado.')
    else:
        st.info('Digite uma placa para consultar.')

# Fun√ß√£o para editar os dados de um ve√≠culo
def editar_veiculo():
    st.title('Editar Ve√≠culo Cadastrado')
    st.write('Digite a placa do ve√≠culo que deseja editar.')

    placa_editar = st.text_input('Placa do Ve√≠culo:').upper()
    veiculos = carregar_veiculos()

    if placa_editar and placa_editar in veiculos:
        veiculo = veiculos[placa_editar]

        st.success('Ve√≠culo encontrado. Edite os dados abaixo.')

        # Campos preenchidos com os dados j√° existentes
        data = st.date_input('Data do cadastro', value=datetime.datetime.strptime(veiculo['data'], "%Y-%m-%d").date())
        cliente = st.text_input('Nome do cliente', value=veiculo['cliente'])
        telefone = st.text_input('Telefone do cliente', value=veiculo['telefone'])
        marca = st.text_input('Marca do ve√≠culo', value=veiculo['marca'])
        modelo = st.text_input('Modelo do ve√≠culo', value=veiculo['modelo'])
        ano = st.number_input('Ano do ve√≠culo', value=int(veiculo['ano']), step=1, format='%d')
        cor = st.text_input('Cor do ve√≠culo', value=veiculo['cor'])
        km = st.number_input('Quilometragem do ve√≠culo', value=int(veiculo['km']), step=1, format='%d')
        resolver = st.text_area('Problema / Servi√ßo a resolver', value=veiculo['resolver'])

        if st.button('Salvar altera√ß√µes'):
            # Atualiza os dados
            veiculos[placa_editar] = criar_cadastro(
                str(data), cliente, telefone, placa_editar, marca, modelo, ano, cor, km, resolver
            )
            salvar_veiculos(veiculos)  # Salva os dados atualizados
            st.success('Dados do ve√≠culo atualizados com sucesso!')
    elif placa_editar:
        st.warning('Ve√≠culo n√£o encontrado.')

# Fun√ß√£o para excluir um ve√≠culo cadastrado
def excluir_veiculo():
    st.title('Excluir Ve√≠culo Cadastrado')
    st.write('Digite a placa do ve√≠culo que deseja excluir.')

    placa_excluir = st.text_input('Placa do Ve√≠culo:').upper()
    veiculos = carregar_veiculos()

    if placa_excluir and placa_excluir in veiculos:
        veiculo = veiculos[placa_excluir]

        # Mostra os dados do ve√≠culo antes de excluir
        st.warning('Aten√ß√£o! Este ve√≠culo ser√° exclu√≠do:')
        st.write(f"Data: {veiculo['data']}")
        st.write(f"Cliente: {veiculo['cliente']}")
        st.write(f"Telefone: {veiculo['telefone']}")
        st.write(f"Placa: {veiculo['placa']}")
        st.write(f"Marca: {veiculo['marca']}")
        st.write(f"Modelo: {veiculo['modelo']}")
        st.write(f"Ano: {veiculo['ano']}")
        st.write(f"Cor: {veiculo['cor']}")
        st.write(f"KM: {veiculo['km']}")
        st.write(f"Resolver: {veiculo['resolver']}")

        # Bot√£o de confirma√ß√£o da exclus√£o
        if st.button('Confirmar exclus√£o'):
            del veiculos[placa_excluir]  # Remove o ve√≠culo do dicion√°rio
            salvar_veiculos(veiculos)  # Salva os dados
            st.success('Ve√≠culo exclu√≠do com sucesso!')
    elif placa_excluir:
        st.warning('Ve√≠culo n√£o encontrado.')

# Menu lateral com as op√ß√µes
st.sidebar.title('Menu')
opcao = st.sidebar.radio(
    'Selecione uma op√ß√£o',
    ('Cadastrar Ve√≠culo', 'Consultar Ve√≠culo','Lista de Ve√≠culos', 'Editar Ve√≠culo', 'Excluir Ve√≠culo',)
)

# Executa a fun√ß√£o escolhida no menu
if opcao == 'Cadastrar Ve√≠culo':
    cadastro_veiculo()

elif opcao == 'Consultar Ve√≠culo':
    consultar_veiculo()

elif opcao == 'Lista de Ve√≠culos':
    lista_veiculos()

elif opcao == 'Editar Ve√≠culo':
    editar_veiculo()

elif opcao == 'Excluir Ve√≠culo':
    excluir_veiculo()            

# Rodap√© do menu lateral
st.sidebar.markdown('---')
st.sidebar.markdown('Desenvolvido por Leonardo Esmarjassi')
st.sidebar.markdown('Vers√£o 1.0')
